<Activity mc:Ignorable="sap sap2010" x:Class="ProcessRunChartsImages" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_runChartTab" Type="InArgument(x:String)" />
    <x:Property Name="in_UnitAddsMTDFileName" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>960,2898</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ProcessRunChartsImages_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="27">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="50">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="ProcessRunChartsImages" sap:VirtualizedContainerService.HintSize="621,2833" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="RunChartsFile" />
      <Variable x:TypeArguments="x:String" Name="ChartsMacroFile" />
      <Variable x:TypeArguments="x:String" Name="USChartSaveLoc" />
      <Variable x:TypeArguments="x:String" Name="CANChartSaveLoc" />
      <Variable x:TypeArguments="x:Boolean" Default="True" Name="isRunChartFileExit" />
      <Variable x:TypeArguments="x:String" Name="UnitAddsChartFile" />
      <Variable x:TypeArguments="x:String" Name="UnitAddsServiceTeamChartSaveLoc" />
      <Variable x:TypeArguments="x:String" Name="MTDUnitAddsVsTargetChartSaveLoc" />
      <Variable x:TypeArguments="x:Boolean" Name="unitAddsFileExists" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Starting Macro Execute in Run Charts File" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace" Message="[&quot;Excuting Macro in NA Service Revenue Run Charts file to get US and CAN Charts&quot;]" />
    <Assign sap2010:Annotation.AnnotationText="Assign Run Charts File Name" DisplayName="Assign - Run Charts File Location" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[RunChartsFile]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_Config("ServiceRunChartsFilePath").ToString)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign DisplayName="Assign- Assign MTD Charts File" sap:VirtualizedContainerService.HintSize="579,60" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[UnitAddsChartFile]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_UnitAddsMTDFileName)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign sap2010:Annotation.AnnotationText="Assign Charts Macro code file name&#xA;" DisplayName="Assign -Charts macro code file name" sap:VirtualizedContainerService.HintSize="579,102" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[ChartsMacroFile]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotInputPath").ToString,in_Config("ChartMacroFileName").ToString)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:LogMessage DisplayName="Log Message -Run Charts Tab name" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Run Chart Tab Name is : &quot;+in_runChartTab]" />
    <Assign sap2010:Annotation.AnnotationText="Assign US data Chart save location" DisplayName="Assign -US data Chart Name" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[USChartSaveLoc]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_Config("USChartName").ToString)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign sap2010:Annotation.AnnotationText="Assign CAN Data Chart save location" DisplayName="Assign -CAN data Chart Name" sap:VirtualizedContainerService.HintSize="579,91" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[CANChartSaveLoc]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_Config("CANChartName").ToString)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign DisplayName="Assign-MTD Service Charts Save Loc" sap:VirtualizedContainerService.HintSize="579,60" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[UnitAddsServiceTeamChartSaveLoc]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_Config("MTDServiceCharts").ToString)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign-MTD Unit Adds Vs Target Chart" sap:VirtualizedContainerService.HintSize="579,60" sap2010:WorkflowViewState.IdRef="Assign_8">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[MTDUnitAddsVsTargetChartSaveLoc]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[path.Combine(Environment.CurrentDirectory,in_Config("BotOutputPath").ToString,in_Config("MTDUnitAddsVsTargetChart").ToString)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:PathExists sap2010:Annotation.AnnotationText="This Activity will check run charts File Path exists" DisplayName="Path Exists -Service Dashboard file exists" Exists="[isRunChartFileExit]" sap:VirtualizedContainerService.HintSize="579,120" sap2010:WorkflowViewState.IdRef="PathExists_1" Path="[RunChartsFile]" PathType="File">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:PathExists>
    <If sap2010:Annotation.AnnotationText="This Activity will check Run Charts File Exist it will run code in run charts file to save the charts" Condition="[isRunChartFileExit]" DisplayName="If -Run charts File Exists" sap:VirtualizedContainerService.HintSize="579,123" sap2010:WorkflowViewState.IdRef="If_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <ui:ExcelApplicationScope Password="{x:Null}" sap2010:Annotation.AnnotationText="This will do execute macro code in Run charts file to get US and CAN data Charts" DisplayName="Excel Application Scope -Macro Code execute in Run charts File" sap:VirtualizedContainerService.HintSize="200,108" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2" Visible="False" WorkbookPath="[ChartsMacroFile]">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Do - ChartsMacro code" sap:VirtualizedContainerService.HintSize="376,809" sap2010:WorkflowViewState.IdRef="Sequence_3">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Message -Run Charts File Exists in Output Folder" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;NA Service Revenue Run charts File Exists&quot;]" />
                <ui:ExecuteMacro ContinueOnError="{x:Null}" MacroOutput="{x:Null}" sap2010:Annotation.AnnotationText="This Activity will execute the Macro Code in Run Charts file to get US data Chart" DisplayName="Execute Macro -US Data Charts" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="ExecuteMacro_1" MacroName="[in_Config(&quot;CopyChartsMacroName&quot;).ToString]" MacroParameters="[{RunChartsFile,in_runChartTab,3,USChartSaveLoc}]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExecuteMacro>
                <ui:ExcelSaveWorkbook DisplayName="Save Copy Charts Workbook" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_1" />
                <ui:LogMessage DisplayName="Log Message -US Chart Saved" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Run Charts US Data Chart Saved Successfully&quot;]" />
                <ui:ExecuteMacro ContinueOnError="{x:Null}" MacroOutput="{x:Null}" sap2010:Annotation.AnnotationText="This Activity will execute the Macro Code in Run Charts file to get CAN data Chart" DisplayName="Execute Macro -CAN Data Chart" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="ExecuteMacro_2" MacroName="[in_Config(&quot;CopyChartsMacroName&quot;).ToString]" MacroParameters="[{RunChartsFile,in_runChartTab,4,CANChartSaveLoc}]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExecuteMacro>
                <ui:ExcelSaveWorkbook DisplayName="Save Charts Macro code Workbook" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_2" />
                <ui:LogMessage DisplayName="Log Message -CAN Chart Saved" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;Run Charts CAN Data Chart Saved Successfully&quot;]" />
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Sequence -Run Charts Not exists in Output Folder" sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message -Run Charts File Not Exist" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Error" Message="[&quot;NA Service revenue Run Charts File Not Exits in Output Folder&quot;]" />
          <Throw DisplayName="Throw -Run Charts File Not Exists" Exception="[New BusinessRuleException(&quot;NA Service revenue Run Charts File Not Exits in Output Folder&quot;)]" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Else>
    </If>
    <ui:PathExists sap2010:Annotation.AnnotationText="This Activity will check Unit Adds File Path exists in Output Folder" DisplayName="Path Exists -Unit Adds File Checking in Output folder" Exists="[unitAddsFileExists]" sap:VirtualizedContainerService.HintSize="579,131" sap2010:WorkflowViewState.IdRef="PathExists_2" Path="[UnitAddsChartFile]" PathType="File">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:PathExists>
    <If Condition="[unitAddsFileExists]" DisplayName="If -Unit Adds MTD File Exists" sap:VirtualizedContainerService.HintSize="579,1150" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Then>
        <ui:ExcelApplicationScope Password="{x:Null}" sap2010:Annotation.AnnotationText="This will do execute macro code in Unit Adds MTD file to get MTD Service Team and MTD Unit Adds Vs Target Charts" DisplayName="Excel Application Scope -Macro Code execute in Unit Adds MTD File" sap:VirtualizedContainerService.HintSize="434,1002" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" Visible="False" WorkbookPath="[ChartsMacroFile]">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Do - Unit Adds ChartsMacro code" sap:VirtualizedContainerService.HintSize="376,851" sap2010:WorkflowViewState.IdRef="Sequence_5">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:LogMessage DisplayName="Log Message -Run Charts File Exists in Output Folder" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Info" Message="[&quot;Unit Adds MTD File Exists&quot;]" />
                <ui:ExecuteMacro ContinueOnError="{x:Null}" MacroOutput="{x:Null}" sap2010:Annotation.AnnotationText="This Activity will execute the Macro Code in Unit Adds  MTD file to get Unit Adds MTD Service Chart" DisplayName="Execute Macro - Unit Adds MTD Service Charts" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="ExecuteMacro_3" MacroName="[in_Config(&quot;CopyChartsMacroName&quot;).ToString]" MacroParameters="[{UnitAddsChartFile,in_Config(&quot;UnitAddsMTDSheetName2&quot;).ToString,1,UnitAddsServiceTeamChartSaveLoc}]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExecuteMacro>
                <ui:ExcelSaveWorkbook DisplayName="Save Copy MTD Charts Workbook" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_3" />
                <ui:LogMessage DisplayName="Log Message - Service Unit Adds MTD Chart Saved" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[&quot;MTD Unit Adds Service Chart Saved Successfully&quot;]" />
                <ui:ExecuteMacro ContinueOnError="{x:Null}" MacroOutput="{x:Null}" sap2010:Annotation.AnnotationText="This Activity will execute the Macro Code in Unit Adds MTD file to get  MTD Unit Adds Vs Target Chart" DisplayName="Execute Macro -MTD Unit Adds Vs Target Chart" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="ExecuteMacro_4" MacroName="[in_Config(&quot;CopyChartsMacroName&quot;).ToString]" MacroParameters="[{UnitAddsChartFile,in_Config(&quot;UnitAddsMTDSheetName2&quot;).ToString,2,MTDUnitAddsVsTargetChartSaveLoc}]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExecuteMacro>
                <ui:ExcelSaveWorkbook DisplayName="Save  MTD Vs Target Charts Macro code Workbook" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="ExcelSaveWorkbook_4" />
                <ui:LogMessage DisplayName="Log Message -CAN Chart Saved" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info" Message="[&quot;MTD Unit Adds Vs Target Chart Saved Successfully&quot;]" />
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
      </If.Then>
    </If>
  </Sequence>
</Activity>